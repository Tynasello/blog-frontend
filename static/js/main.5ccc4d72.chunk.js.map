{"version":3,"sources":["reportWebVitals.ts","theme/Theme.ts","theme/GlobalStyle.ts","components/Nav.tsx","components/Utils/Form.tsx","components/Utils/Input.tsx","components/Utils/Button.tsx","pages/Login.tsx","components/Admin/PostPreview.tsx","components/Utils/TextInput.tsx","components/Utils/Modal.tsx","components/Utils/ModalContainer.tsx","pages/Admin/Posts.tsx","components/Public/PostPreview.tsx","pages/Public/Posts.tsx","components/Public/Post.tsx","components/Admin/Post.tsx","Routes.tsx","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Theme","colors","light","lightGray","darkGray","green","red","main","secondary","fontColor","fonts","header","body","GlobalStyle","createGlobalStyle","Nav","NavContainer","NavContent","NavLink","to","href","onClick","localStorage","clear","window","location","reload","styled","nav","theme","div","Link","Form","onSubmit","children","FormContainer","e","form","Input","type","value","onChange","InputContainer","input","Button","args","ButtonContainer","button","Login","useState","username","setUsername","password","setPassword","handleSubmit","a","preventDefault","fetch","method","headers","JSON","stringify","req","json","result","status","setItem","token","console","log","LoginContainer","LoginHeader","target","h3","PostPreview","title","author","date","id","match","useRouteMatch","handleDeletePostComments","getItem","handleDeletePost","PostContainer","PostTitle","PostAuthor","PostDate","style","color","pathname","url","h6","TextInput","useEffect","elements","forEach","el","height","scrollHeight","autoGrow","document","querySelectorAll","TextAreaContainer","textarea","Modal","isOpen","closeModal","ReactDom","createPortal","Overlay","getElementById","ModalContainer","buttonText","modalOpen","setModalOpen","ModalContainerDiv","AdminPosts","posts","setPosts","newTitle","setNewTitle","newText","setNewText","newAuthor","setNewAuthor","postsArr","Object","values","handlePostCreate","author_name","text","PostsPageContainer","PostsContainer","map","post","_id","margin","state","PublicPosts","Post","comments","setComments","newCommentAuthor","setNewCommentAuthor","newCommentText","setNewCommentText","useLocation","commentsArr","handleNewComment","Title","Author","Text","CommentsContainer","CommentsHeader","NewCommentContainer","comment","CommentDiv","CommentAuthor","CommentText","Date","p","h4","split","pop","setTitle","setText","setAuthor","setDate","handleDeleteComment","commentId","handePostUpdate","push","Routes","auth","setAuth","isAuth","exact","path","App","className","ReactDOM","render","StrictMode","basename"],"mappings":"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","file":"static/js/main.5ccc4d72.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/*--------------------------------------------------------------*/\n\nconst Theme = {\n  colors: {\n    light: \"#ECF0F1\",\n    lightGray: \"#D0D3D4\",\n    darkGray: \"#363537\",\n\n    green: \"#28B463\",\n    red: \"#E74C3C\",\n\n    main: \"#3D5A6C\",\n    secondary: \"#75B9BE\",\n\n    fontColor: \"#2A2D34\",\n  },\n  fonts: {\n    header: \"'Poppins', sans-serif;\",\n    body: \"'Open Sans', sans-serif;\",\n  },\n};\n\n/*--------------------------------------------------------------*/\nexport default Theme;\n/*--------------------------------------------------------------*/\n","/*--------------------------------------------------------------*/\n\nimport { createGlobalStyle } from \"styled-components\";\n\n/*--------------------------------------------------------------*/\n\nconst GlobalStyle = createGlobalStyle`\n    *,\n    *::before,\n    *::after {\n        box-sizing: border-box;\n        padding: 0;\n        margin: 0;\n\n    }\n    a{\n        text-decoration: none;\n        color: black;\n    }\n    h1,h2,h3,h4,h5,h6,p,div{\n        margin:0;\n        padding:0;\n    }\n    body{\n        font-family:'Open Sans', sans-serif;\n        background-color:#ECF0F1;\n        color:#2A2D34;\n    }\n    \n`;\n/*--------------------------------------------------------------*/\nexport default GlobalStyle;\n/*--------------------------------------------------------------*/\n","/*--------------------------------------------------------------*/\n\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\n/*--------------------------------------------------------------*/\n\ninterface navProps {}\n\n/*--------------------------------------------------------------*/\n\nconst Nav: React.FC<navProps> = () => {\n  return (\n    <NavContainer>\n      {/* -------------------------------------------------------------- */}\n\n      <NavContent>\n        <NavLink to=\"/\" href=\"#\">\n          Home\n        </NavLink>\n\n        {/* -------------------------------------------------------------- */}\n\n        <NavLink to=\"/admin\" aria-current=\"page\" href=\"#\">\n          Admin\n        </NavLink>\n\n        {/* -------------------------------------------------------------- */}\n\n        <NavLink\n          onClick={() => {\n            localStorage.clear();\n            window.location.reload();\n          }}\n          to=\"/admin\"\n        >\n          Log Out\n        </NavLink>\n\n        {/* -------------------------------------------------------------- */}\n      </NavContent>\n    </NavContainer>\n  );\n};\nexport default Nav;\n\n/*--------------------------------------------------------------*/\n\nconst NavContainer = styled.nav`\n  display: flex;\n  flex-direction: row;\n\n  background-color: ${({ theme }) => theme.colors.main};\n\n  padding: 1.5rem;\n`;\nconst NavContent = styled.div`\n  width: 70vw;\n  margin: 0 auto;\n`;\nconst NavLink = styled(Link)`\n  color: ${({ theme }) => theme.colors.light};\n\n  list-style: none;\n  text-decoration: none;\n\n  padding: 0 0.6rem;\n\n  &:hover {\n    color: ${({ theme }) => theme.colors.lightGray};\n    text-decoration: none;\n    list-style: none;\n\n    transform: scale(1.02);\n  }\n`;\n","/*--------------------------------------------------------------*/\n\nimport React from \"react\";\nimport styled from \"styled-components\";\n\n/*--------------------------------------------------------------*/\n\ninterface FormProps {\n  onSubmit: any;\n  children: any;\n}\n\n/*--------------------------------------------------------------*/\n\nexport const Form: React.FC<FormProps> = ({ onSubmit, children }) => {\n  return (\n    <FormContainer\n      onSubmit={(e) => {\n        onSubmit(e);\n      }}\n    >\n      {children}\n    </FormContainer>\n  );\n};\n\n/*--------------------------------------------------------------*/\n\nconst FormContainer = styled.form`\n  display: flex;\n  flex-direction: column;\n  & > * > * {\n    padding: 0.2rem 0;\n  }\n`;\n","/*--------------------------------------------------------------*/\n\nimport React from \"react\";\nimport styled from \"styled-components\";\n\n/*--------------------------------------------------------------*/\n\ninterface InputProps {\n  type?: string;\n  value?: string;\n  onChange: any;\n}\n\n/*--------------------------------------------------------------*/\n\nexport const Input: React.FC<InputProps> = ({ type, value, onChange }) => {\n  return (\n    <InputContainer\n      type={type}\n      value={value}\n      onChange={onChange}\n    ></InputContainer>\n  );\n};\n\n/*--------------------------------------------------------------*/\n\nconst InputContainer = styled.input`\n  background-color: ${({ theme }) => theme.colors.light};\n\n  margin: 0.4rem 0;\n  padding: 0.2rem 0.4rem;\n\n  border: 1px solid ${({ theme }) => theme.colors.darkGray};\n  border-radius: 4px;\n`;\n","/*--------------------------------------------------------------*/\n\nimport React from \"react\";\nimport styled from \"styled-components\";\n\n/*--------------------------------------------------------------*/\n\ninterface ButtonProps {\n  type?: string;\n  value?: string;\n  onClick?: any;\n  args?: any[];\n  children?: any;\n}\n\n/*--------------------------------------------------------------*/\n\nexport const Button: React.FC<ButtonProps> = ({\n  type,\n  value,\n  onClick,\n  args = [],\n  children,\n}) => {\n  // Render different button if there is an onClick method passed in props\n  if (onClick) {\n    return (\n      <ButtonContainer value={value} onClick={() => onClick(...args)}>\n        {children}\n      </ButtonContainer>\n    );\n  }\n  return <ButtonContainer value={value}>{children}</ButtonContainer>;\n};\n\n/*--------------------------------------------------------------*/\n\nconst ButtonContainer = styled.button`\n  display: block;\n  width: 100%;\n  max-width: 170px;\n  margin: 1rem 0;\n  padding: 1rem 0.3rem;\n\n  background-color: ${({ theme }) => theme.colors.secondary};\n  color: ${({ theme }) => theme.colors.light};\n  cursor: pointer;\n  border-radius: 5px;\n  border: 1px solid grey;\n\n  &:active {\n    transform: scale(1.03);\n  }\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.main};\n  }\n`;\n","/*--------------------------------------------------------------*/\n\nimport React, { SyntheticEvent, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { Form } from \"../components/Utils/Form\";\nimport { Input } from \"../components/Utils/Input\";\nimport { Button } from \"../components/Utils/Button\";\n\n/*--------------------------------------------------------------*/\n\ninterface loginProps {}\n\n/*--------------------------------------------------------------*/\n\nconst Login: React.FC<loginProps> = () => {\n  // Username and password for user\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  // Handle login form submit\n  const handleSubmit = async (e: SyntheticEvent) => {\n    e.preventDefault();\n\n    try {\n      // POST\n      // Log in request to API\n      // Pass username and password as body contents\n      const req = await fetch(\n        `https://tynasello-blog-api.herokuapp.com/blog/log-in`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ username, password }),\n        }\n      );\n\n      const result = await req.json();\n\n      if (req.status === 200) {\n        // If logged in successfully\n        // Set token in localStorage equal to token recieved from POST request\n        localStorage.setItem(\"token\", result.token);\n        localStorage.setItem(\"auth\", \"true\");\n      } else {\n        console.log(result);\n        return;\n      }\n\n      <Redirect to=\"/posts\" />;\n      window.location.reload();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <LoginContainer>\n      <LoginHeader>Login Page</LoginHeader>\n\n      {/* -------------------------------------------------------------- */}\n      {/* \n        On submit run handleSubmit function \n        On change of any input values, set the corresponding variable equal to the event target value\n      */}\n      <Form onSubmit={handleSubmit}>\n        {/* -------------------------------------------------------------- */}\n\n        <p>Username: </p>\n        <Input\n          type=\"text\"\n          value={username}\n          onChange={(e: any) => {\n            setUsername(e.target.value);\n          }}\n        ></Input>\n\n        {/* -------------------------------------------------------------- */}\n\n        <p>Password:</p>\n        <Input\n          type=\"password\"\n          value={password}\n          onChange={(e: any) => {\n            setPassword(e.target.value);\n          }}\n        ></Input>\n\n        {/* -------------------------------------------------------------- */}\n\n        <Button value=\"Submit\">Log In</Button>\n      </Form>\n    </LoginContainer>\n  );\n};\nexport default Login;\n\nconst LoginContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  width: 30vw;\n  margin: 0 auto;\n`;\nconst LoginHeader = styled.h3`\n  padding: 2rem 0;\n`;\n","/*--------------------------------------------------------------*/\n\nimport React from \"react\";\nimport { useRouteMatch, Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport { Button } from \"../Utils/Button\";\n\n/*--------------------------------------------------------------*/\n\ninterface PostProps {\n  title: string;\n  text: string;\n  author: string;\n  date: string;\n  id: string;\n}\n\n/*--------------------------------------------------------------*/\n\nexport const PostPreview: React.FC<PostProps> = ({\n  title,\n  author,\n  date,\n  id,\n}) => {\n  // match with hold url for current page\n  const match = useRouteMatch();\n\n  /*--------------------------------------------------------------*/\n\n  // When post is deleted all of its comments must first be deleted\n  const handleDeletePostComments = async () => {\n    try {\n      // DELETE\n      // Pass x-access-token token from localStorage for user authentication\n      await fetch(\n        `https://tynasello-blog-api.herokuapp.com/blog/posts/${id}/comments`,\n        {\n          method: \"DELETE\",\n          headers: {\n            \"x-access-token\": localStorage.getItem(\"token\") || \" \",\n          },\n        }\n      );\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  /*--------------------------------------------------------------*/\n\n  // Handle delete post button onClick\n  const handleDeletePost = async () => {\n    handleDeletePostComments();\n    try {\n      // DELETE\n      // Pass x-access-token token from localStorage for user authentication\n      await fetch(`https://tynasello-blog-api.herokuapp.com/blog/posts/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"x-access-token\": localStorage.getItem(\"token\") || \" \",\n        },\n      });\n\n      // Reload window to see post removed immediately\n      window.location.reload();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  /*--------------------------------------------------------------*/\n\n  return (\n    <PostContainer>\n      <PostTitle>{title}</PostTitle>\n      <PostAuthor>{author}</PostAuthor>\n      <PostDate>{date}</PostDate>\n\n      {/* -------------------------------------------------------------- */}\n\n      <Link\n        style={{ color: \"#0ca1a1\" }}\n        to={{\n          pathname: `${match.url}/posts/${id}`,\n        }}\n      >\n        See More\n      </Link>\n\n      {/* -------------------------------------------------------------- */}\n\n      <Button onClick={handleDeletePost}>Delete Post</Button>\n    </PostContainer>\n  );\n};\n\n/*--------------------------------------------------------------*/\n\nconst PostContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 2rem;\n\n  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n  & > * {\n    padding: 0.3rem 0;\n  }\n`;\nconst PostTitle = styled.h3``;\nconst PostAuthor = styled.h6``;\nconst PostDate = styled.h6``;\n","/*--------------------------------------------------------------*/\n\nimport React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\n\n/*--------------------------------------------------------------*/\n\n/*----------------------------------------------------------------\nAutomatically updates height of textarea to fit all content\n----------------------------------------------------------------*/\n\nfunction autoGrow(elements: NodeListOf<Element>) {\n  elements.forEach((el: any) => {\n    el.style.height = \"0.8rem\";\n    el.style.height = el.scrollHeight + \"px\";\n  });\n}\n\n/*--------------------------------------------------------------*/\n\ninterface TextInputProps {\n  type?: string;\n  value?: string;\n  onChange: any;\n}\n\n/*--------------------------------------------------------------*/\n\nexport const TextInput: React.FC<TextInputProps> = ({ value, onChange }) => {\n  /*--------------------------------------------------------------*/\n  // Effect hook to automatically adjust height of textarea as its content updates\n  useEffect(() => {\n    const elements: NodeListOf<Element> =\n      document.querySelectorAll(TextAreaContainer);\n    autoGrow(elements);\n  });\n\n  /*--------------------------------------------------------------*/\n\n  return (\n    <TextAreaContainer\n      onChange={(e) => onChange(e)}\n      value={value}\n    ></TextAreaContainer>\n  );\n};\n\n/*--------------------------------------------------------------*/\n\nconst TextAreaContainer = styled.textarea`\n  margin: 0.4rem 0;\n  padding: 0.2rem 0.4rem;\n\n  background-color: ${({ theme }) => theme.colors.light};\n  border: 1px solid ${({ theme }) => theme.colors.darkGray};\n  border-radius: 4px;\n`;\n","/*--------------------------------------------------------------*/\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { Button } from \"./Button\";\nimport ReactDom from \"react-dom\";\n\n/*--------------------------------------------------------------*/\n\ninterface ModalProps {\n  isOpen: boolean;\n  closeModal: any;\n  children?: any;\n}\n\n/*--------------------------------------------------------------*/\n\nexport const Modal: React.FC<ModalProps> = ({\n  isOpen,\n  closeModal,\n  children,\n}) => {\n  // If the model is already open return null\n  if (!isOpen) return null;\n\n  // Using CreatePortal. Maintains the modals child parent relationships\n  return ReactDom.createPortal(\n    <>\n      {/* Display overlay in background */}\n      <Overlay />\n      <ModalContainer>\n        {children}\n        <Button onClick={closeModal}>Close</Button>\n      </ModalContainer>\n    </>,\n    document.getElementById(\"portal\")!\n  );\n};\n\n/*--------------------------------------------------------------*/\n\nconst Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 5;\n  background-color: rgba(0, 0, 0, 0.7);\n`;\nconst ModalContainer = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 60vw;\n\n  background-color: ${({ theme }) => theme.colors.light};\n\n  padding: 50px;\n  z-index: 5;\n`;\n","/*--------------------------------------------------------------*/\n\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Button } from \"./Button\";\nimport { Modal } from \"./Modal\";\n\n/*--------------------------------------------------------------*/\n\ninterface ModalContainerProps {\n  buttonText: string;\n  children: any;\n}\n\n/*--------------------------------------------------------------*/\n\nexport const ModalContainer: React.FC<ModalContainerProps> = ({\n  buttonText,\n  children,\n}) => {\n  const [modalOpen, setModalOpen] = useState(false);\n\n  return (\n    <ModalContainerDiv>\n      <Button onClick={() => setModalOpen(true)}>{buttonText}</Button>\n\n      <Modal isOpen={modalOpen} closeModal={() => setModalOpen(false)}>\n        {children}\n      </Modal>\n    </ModalContainerDiv>\n  );\n};\n\n/*--------------------------------------------------------------*/\n\nconst ModalContainerDiv = styled.div``;\n","/*--------------------------------------------------------------*/\n\nimport React, { SyntheticEvent, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { PostPreview } from \"../../components/Admin/PostPreview\";\n\nimport { Form } from \"../../components/Utils/Form\";\nimport { Input } from \"../../components/Utils/Input\";\nimport { Button } from \"../../components/Utils/Button\";\nimport { TextInput } from \"../../components/Utils/TextInput\";\nimport { ModalContainer } from \"../../components/Utils/ModalContainer\";\n\n/*--------------------------------------------------------------*/\n\ninterface PublicPostsProps {}\n\ninterface Post {\n  title: string;\n  date: string;\n  published: boolean;\n  author_name: string;\n  _id: string;\n  text: string;\n}\n\n/*--------------------------------------------------------------*/\n\nexport const AdminPosts: React.FC<PublicPostsProps> = () => {\n  // Posts array from db\n  const [posts, setPosts] = useState<[]>([]);\n\n  // String variables for new title, text, and author\n  const [newTitle, setNewTitle] = useState(\"\");\n  const [newText, setNewText] = useState(\"\");\n  const [newAuthor, setNewAuthor] = useState(\"\");\n\n  /*--------------------------------------------------------------*/\n\n  // Run effect and clean up only once (on mount and unmount)\n  useEffect(() => {\n    (async () => {\n      try {\n        // GET\n        // posts request to API\n        const req = await fetch(\n          `https://tynasello-blog-api.herokuapp.com/blog/posts`,\n          {\n            method: \"GET\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }\n        );\n\n        let result = await req.json();\n        if (req.status !== 200) {\n          return;\n        }\n        // Get values from result and set posts equal to the first index of said values\n        const postsArr: any = Object.values(result);\n        setPosts(postsArr[0]);\n      } catch (err) {\n        console.log(err);\n      }\n    })();\n  }, []);\n\n  /*--------------------------------------------------------------*/\n\n  // Handle create post form submit\n  const handlePostCreate = async (e: SyntheticEvent) => {\n    e.preventDefault();\n    try {\n      // POST\n      // posts request to API\n      // Pass x-access-token token from localStorage for user authentication\n      // Pass newTitle,newAuthor, and newText as body contents\n      await fetch(`https://tynasello-blog-api.herokuapp.com/blog/posts/`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-access-token\": localStorage.getItem(\"token\") || \" \",\n        },\n        body: JSON.stringify({\n          title: newTitle,\n          author_name: newAuthor,\n          text: newText,\n        }),\n      });\n\n      // Reload window so new post appears\n      window.location.reload();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  /*--------------------------------------------------------------*/\n\n  return (\n    <PostsPageContainer>\n      {/* -------------------------------------------------------------- */}\n\n      <PostsContainer>\n        {posts &&\n          // If there are posts, map each post to a PostPreview component with appropriate props\n          posts.map((post: Post) => {\n            return (\n              <PostPreview\n                key={post._id}\n                id={post._id}\n                title={post.title}\n                text={post.text}\n                author={post.author_name}\n                date={post.date}\n              />\n            );\n          })}\n      </PostsContainer>\n\n      {/* -------------------------------------------------------------- */}\n\n      <ModalContainer buttonText=\"Create New Post\">\n        {/* \n          On submit run handlePostCreate function \n          On change of any input values, set the corresponding variable equal to the event target value\n        */}\n\n        <Form onSubmit={handlePostCreate}>\n          {/* -------------------------------------------------------------- */}\n\n          <p style={{ margin: 0 }}>Post Title:</p>\n          <Input\n            type=\"text\"\n            value={newTitle}\n            onChange={(e: any) => {\n              setNewTitle(e.target.value);\n            }}\n          ></Input>\n\n          {/* -------------------------------------------------------------- */}\n\n          <p>Author:</p>\n          <Input\n            type=\"text\"\n            value={newAuthor}\n            onChange={(e: any) => {\n              setNewAuthor(e.target.value);\n            }}\n          ></Input>\n\n          {/* -------------------------------------------------------------- */}\n\n          <p>Text</p>\n          <TextInput\n            type=\"text\"\n            value={newText}\n            onChange={(e: any) => {\n              setNewText(e.target.value);\n            }}\n          ></TextInput>\n\n          {/* -------------------------------------------------------------- */}\n\n          <Button value=\"Submit\">Confirm New Post</Button>\n        </Form>\n      </ModalContainer>\n\n      {/* -------------------------------------------------------------- */}\n    </PostsPageContainer>\n  );\n};\nconst PostsPageContainer = styled.div`\n  width: 50vw;\n  margin: 0 auto;\n`;\nconst PostsContainer = styled.div`\n  display: grid;\n  grid-gap: 3rem;\n\n  width: 50vw;\n  margin: 0 auto;\n  padding: 3rem 0;\n`;\n","/*--------------------------------------------------------------*/\n\nimport React from \"react\";\nimport { useRouteMatch, Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\n/*--------------------------------------------------------------*/\n\ninterface PostProps {\n  title: string;\n  text: string;\n  author: string;\n  date: string;\n  id: string;\n}\n\n/*--------------------------------------------------------------*/\n\nexport const PostPreview: React.FC<PostProps> = ({\n  title,\n  text,\n  author,\n  date,\n  id,\n}) => {\n  // match with hold url for current page\n  const match = useRouteMatch();\n  return (\n    <PostContainer>\n      <PostTitle>{title}</PostTitle>\n      <PostAuthor>{author}</PostAuthor>\n      <PostDate>{date}</PostDate>\n      <Link\n        style={{ color: \"#75B9BE\" }}\n        // Link is to the current url / the id corresponding to a particular post\n        // Pass post attributes in through state key\n        to={{\n          pathname: `${match.url}/${id}`,\n          state: { title, text, author, date, id },\n        }}\n      >\n        See More\n      </Link>\n    </PostContainer>\n  );\n};\n\n/*--------------------------------------------------------------*/\n\nconst PostContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  & > * {\n    padding: 0.3rem 0;\n  }\n`;\nconst PostTitle = styled.h3``;\nconst PostAuthor = styled.h6``;\nconst PostDate = styled.h6``;\n","/*--------------------------------------------------------------*/\n\nimport React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { PostPreview } from \"../../components/Public/PostPreview\";\n\n/*--------------------------------------------------------------*/\n\ninterface PublicPostsProps {}\n\ninterface Post {\n  title: string;\n  date: string;\n  published: boolean;\n  author_name: string;\n  _id: string;\n  text: string;\n}\n\n/*--------------------------------------------------------------*/\n\nexport const PublicPosts: React.FC<PublicPostsProps> = () => {\n  // Posts array from db\n  const [posts, setPosts] = useState([]);\n\n  // Run effect and clean up only once (on mount and unmount)\n  useEffect(() => {\n    // (async()=>{})(); to get async function in useEffect\n    (async () => {\n      try {\n        // GET\n        // posts request to API\n        const req = await fetch(\n          `https://tynasello-blog-api.herokuapp.com/blog/posts`,\n          {\n            method: \"GET\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }\n        );\n\n        let result = await req.json();\n        if (req.status !== 200) {\n          return;\n        }\n        // Get values from result and set posts equal to the first index of said values\n        const postsArr: any = Object.values(result);\n        setPosts(postsArr[0]);\n      } catch (err) {\n        console.log(err);\n      }\n    })();\n  }, []);\n\n  return (\n    <PostsContainer>\n      {/* -------------------------------------------------------------- */}\n\n      {posts &&\n        // If there are posts, map each post to a PostPreview component with appropriate props\n        posts.map((post: Post) => {\n          return (\n            <PostPreview\n              key={post._id}\n              id={post._id}\n              title={post.title}\n              text={post.text}\n              author={post.author_name}\n              date={post.date}\n            />\n          );\n        })}\n\n      {/* -------------------------------------------------------------- */}\n    </PostsContainer>\n  );\n};\n\nconst PostsContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  grid-gap: 4rem;\n\n  width: 70vw;\n  margin: 0 auto;\n  padding: 3rem 0;\n`;\n","/*--------------------------------------------------------------*/\n\nimport React, { SyntheticEvent, useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport { Button } from \"../Utils/Button\";\nimport { Form } from \"../Utils/Form\";\nimport { Input } from \"../Utils/Input\";\nimport { TextInput } from \"../Utils/TextInput\";\n\n/*--------------------------------------------------------------*/\n\ninterface PostProps {}\n\ninterface LocationState {\n  title: string;\n  text: string;\n  author: string;\n  date: string;\n  id: string;\n}\ninterface Comment {\n  author_name: string;\n  date: string;\n  parent_post_id: string;\n  text: string;\n  _id: string;\n}\n\n/*--------------------------------------------------------------*/\nexport const Post: React.FC<PostProps> = () => {\n  // All comments in db\n  const [comments, setComments] = useState<[]>([]);\n  // New comment author and text\n  const [newCommentAuthor, setNewCommentAuthor] = useState(\"\");\n  const [newCommentText, setNewCommentText] = useState(\"\");\n\n  // useLocation hook allows access to variables in state object\n  const location = useLocation<LocationState>();\n  // Info about current post retrieved from location.state object\n  const title = location.state.title;\n  const text = location.state.text;\n  const author = location.state.author;\n  const date = location.state.date;\n  const id = location.state.id;\n\n  /*--------------------------------------------------------------*/\n\n  // Run effect and clean up on mount, unmount, and when id changes\n  useEffect(() => {\n    (async () => {\n      try {\n        // GET\n        // Get all comments of current post\n        const req = await fetch(\n          `https://tynasello-blog-api.herokuapp.com/blog/posts/${id}/comments`,\n          {\n            method: \"GET\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }\n        );\n\n        let result = await req.json();\n        if (req.status !== 200) {\n          return;\n        }\n        // Get values from result and set comments equal to the first index of said values\n        const commentsArr: any = Object.values(result);\n        setComments(commentsArr[0]);\n      } catch (err) {\n        console.log(err);\n      }\n    })();\n  }, [id]);\n\n  /*--------------------------------------------------------------*/\n\n  // Handle new comment form submit\n  const handleNewComment = async (e: SyntheticEvent) => {\n    e.preventDefault();\n    try {\n      // POST\n      // Pass newCommentText, and newCommentAuthor as body contents\n      await fetch(\n        `https://tynasello-blog-api.herokuapp.com/blog/posts/${id}/comments`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            text: newCommentText,\n            author_name: newCommentAuthor,\n          }),\n        }\n      );\n      // Reload window to display new comment\n      window.location.reload();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  /*--------------------------------------------------------------*/\n\n  return (\n    <PostContainer>\n      <Title>{title}</Title>\n      <Author>{author}</Author>\n      <Date>{date}</Date>\n      <Text>{text}</Text>\n\n      {/* -------------------------------------------------------------- */}\n\n      <CommentsContainer>\n        <CommentsHeader>Comments</CommentsHeader>\n\n        {/* -------------------------------------------------------------- */}\n\n        <NewCommentContainer>\n          <Form onSubmit={handleNewComment}>\n            {/* -------------------------------------------------------------- */}\n\n            <p>Author Name:</p>\n            <Input\n              type=\"text\"\n              value={newCommentAuthor}\n              onChange={(e: any) => {\n                setNewCommentAuthor(e.target.value);\n              }}\n            ></Input>\n\n            {/* -------------------------------------------------------------- */}\n\n            <p>Text:</p>\n            <TextInput\n              type=\"text\"\n              value={newCommentText}\n              onChange={(e: any) => {\n                setNewCommentText(e.target.value);\n              }}\n            ></TextInput>\n\n            {/* -------------------------------------------------------------- */}\n\n            <Button value=\"Submit\">Post Comment</Button>\n          </Form>\n        </NewCommentContainer>\n\n        {/* -------------------------------------------------------------- */}\n\n        {comments &&\n          // If there are coments map each one to a CommentDiv component with CommentAuthor and CommentText styled divs\n          comments.map((comment: Comment) => {\n            return (\n              <CommentDiv key={comment._id}>\n                <CommentAuthor>{comment.author_name}</CommentAuthor>\n                <CommentText>{comment.text}</CommentText>\n              </CommentDiv>\n            );\n          })}\n      </CommentsContainer>\n    </PostContainer>\n  );\n};\n\n/*--------------------------------------------------------------*/\n\nconst PostContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  width: 50vw;\n  margin: 3rem auto;\n\n  & > * {\n    padding: 0.4rem 0;\n  }\n`;\nconst Title = styled.h3`\n  padding-bottom: 2rem;\n`;\nconst Author = styled.h6``;\nconst Date = styled.h6``;\nconst Text = styled.p``;\n\nconst CommentsHeader = styled.h4`\n  margin-top: 1rem;\n`;\nconst CommentsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  & > * {\n    padding: 0.4rem 0;\n  }\n`;\nconst CommentDiv = styled.div`\n  background-color: ${({ theme }) => theme.colors.light};\n\n  padding: 1rem;\n  margin: 1.5rem 0;\n\n  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n  border-radius: 4px;\n\n  & > * {\n    padding: 0.2rem 0;\n  }\n`;\nconst CommentAuthor = styled.h6``;\nconst CommentText = styled.p`\n  font-size: 0.9rem;\n`;\n\nconst NewCommentContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n","/*--------------------------------------------------------------*/\n\nimport React, { SyntheticEvent, useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Form } from \"../Utils/Form\";\nimport { Input } from \"../Utils/Input\";\nimport { TextInput } from \"../Utils/TextInput\";\nimport { Button } from \"../Utils/Button\";\nimport { ModalContainer } from \"../Utils/ModalContainer\";\n\n/*--------------------------------------------------------------*/\n\ninterface PostProps {}\n\ninterface Comment {\n  author_name: string;\n  date: string;\n  parent_post_id: string;\n  text: string;\n  _id: string;\n}\n\n/*--------------------------------------------------------------*/\nexport const Post: React.FC<PostProps> = () => {\n  const [comments, setComments] = useState<[]>([]);\n\n  const id = window.location.pathname.split(\"/\").pop();\n\n  const [title, setTitle] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n\n  /*--------------------------------------------------------------*/\n\n  // Run effect and clean up on mount, unmount, and when id changes\n  useEffect(() => {\n    (async () => {\n      try {\n        // GET\n        // Get post in db by id\n        const req = await fetch(\n          `https://tynasello-blog-api.herokuapp.com/blog/posts/${id}`,\n          {\n            method: \"GET\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }\n        );\n\n        let result = await req.json();\n        if (req.status !== 200) {\n          return;\n        }\n        result = result.post;\n\n        // Set all post atrribute variables\n        setTitle(result.title);\n        setText(result.text);\n        setAuthor(result.author_name);\n        setDate(result.date);\n      } catch (err) {\n        console.log(err);\n      }\n      try {\n        // GET\n        // Get all of the comments of current blog post\n        const req = await fetch(\n          `https://tynasello-blog-api.herokuapp.com/blog/posts/${id}/comments`,\n          {\n            method: \"GET\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }\n        );\n\n        let result = await req.json();\n        if (req.status !== 200) {\n          return;\n        }\n        // Get values from result and set comments equal to the first index of said values\n        const commentsArr: any = Object.values(result);\n        setComments(commentsArr[0]);\n      } catch (err) {\n        console.log(err);\n      }\n    })();\n  }, [id]);\n\n  /*--------------------------------------------------------------*/\n\n  // Handle delete comment button onClick\n  const handleDeleteComment = async (commentId: string) => {\n    try {\n      // DELETE\n      // Pass x-access-token token from localStorage for user authentication\n      // Delete comment of current post by id\n      await fetch(\n        `https://tynasello-blog-api.herokuapp.com/blog/posts/${id}/comments/${commentId}`,\n        {\n          method: \"DELETE\",\n          headers: {\n            \"x-access-token\": localStorage.getItem(\"token\") || \" \",\n          },\n        }\n      );\n      // Reload window to see comment deleted immediately\n      window.location.reload();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  /*--------------------------------------------------------------*/\n\n  // Handle post update form submit\n  const handePostUpdate = async (e: SyntheticEvent) => {\n    e.preventDefault();\n    try {\n      // PATCH\n      // Update post by id\n      // Pass x-access-token token from localStorage for user authentication\n      // Pass title,author, and text as body contents\n      await fetch(`https://tynasello-blog-api.herokuapp.com/blog/posts/${id}`, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"x-access-token\": localStorage.getItem(\"token\") || \" \",\n        },\n        body: JSON.stringify({ title: title, author_name: author, text: text }),\n      });\n\n      // Reload window to see post updated immediately\n      window.location.reload();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  /*--------------------------------------------------------------*/\n\n  return (\n    <PostContainer>\n      <Title>{title}</Title>\n      <Author>{author}</Author>\n      <Date>{date}</Date>\n      <Text>{text}</Text>\n\n      {/* -------------------------------------------------------------- */}\n\n      <ModalContainer buttonText=\"Edit Post\">\n        <PostTitle>Edit Blog Post</PostTitle>\n        <br />\n        <Form onSubmit={handePostUpdate}>\n          {/* -------------------------------------------------------------- */}\n\n          <p>Post Title:</p>\n          <Input\n            type=\"text\"\n            value={title}\n            onChange={(e: any) => {\n              setTitle(e.target.value);\n            }}\n          ></Input>\n\n          {/* -------------------------------------------------------------- */}\n\n          <p>Author Name:</p>\n          <Input\n            type=\"text\"\n            value={author}\n            onChange={(e: any) => {\n              setAuthor(e.target.value);\n            }}\n          ></Input>\n\n          {/* -------------------------------------------------------------- */}\n\n          <p>Content:</p>\n          <TextInput\n            type=\"text\"\n            value={text}\n            onChange={(e: any) => {\n              setText(e.target.value);\n            }}\n          ></TextInput>\n\n          {/* -------------------------------------------------------------- */}\n\n          <Button value=\"Submit\">Confirm Edit</Button>\n        </Form>\n      </ModalContainer>\n\n      {/* -------------------------------------------------------------- */}\n\n      <CommentsContainer>\n        <CommentsHeader>Comments</CommentsHeader>\n\n        {/* -------------------------------------------------------------- */}\n\n        {comments &&\n          comments.map((comment: Comment) => {\n            // If there are comments map each once to a CommentDiv styled div with appropriate author text and button elements\n            // Pass args, which contains only the comment id, to the Button component.\n            // args will be passed into the onClick method of the Button component\n            const args = [];\n            args.push(comment._id);\n            return (\n              <>\n                <CommentDiv key={comment._id}>\n                  <CommentAuthor>{comment.author_name}</CommentAuthor>\n                  <CommentText>{comment.text}</CommentText>\n                  <Button onClick={handleDeleteComment} args={args}>\n                    Delete Comment\n                  </Button>\n                </CommentDiv>\n              </>\n            );\n          })}\n\n        {/* -------------------------------------------------------------- */}\n      </CommentsContainer>\n    </PostContainer>\n  );\n};\n\n/*--------------------------------------------------------------*/\n\nconst PostContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 50vw;\n  margin: 3rem auto;\n  & > * {\n    padding: 0.4rem 0;\n  }\n`;\nconst Title = styled.h3`\n  padding-bottom: 2rem;\n`;\nconst Author = styled.h6``;\nconst Date = styled.h6``;\nconst Text = styled.p``;\nconst CommentsHeader = styled.h4`\n  margin-top: 1rem;\n`;\nconst CommentsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  & > * {\n    padding: 0.4rem 0;\n  }\n`;\nconst CommentDiv = styled.div`\n  background-color: ${({ theme }) => theme.colors.light};\n\n  padding: 1rem;\n  margin: 1.5rem 0;\n\n  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n  border-radius: 4px;\n\n  & > * {\n    padding: 0.2rem 0;\n  }\n`;\nconst CommentAuthor = styled.h6``;\nconst CommentText = styled.p`\n  font-size: 0.9rem;\n`;\n\nconst PostTitle = styled.h3``;\n","/*--------------------------------------------------------------*/\n\nimport React, { useEffect, useState } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\n\nimport Nav from \"./components/Nav\";\n\nimport Login from \"./pages/Login\";\nimport { AdminPosts } from \"./pages/Admin/Posts\";\nimport { PublicPosts } from \"./pages/Public/Posts\";\nimport { Post as PublicPost } from \"./components/Public/Post\";\nimport { Post as AdminPost } from \"./components/Admin/Post\";\n\n/*--------------------------------------------------------------*/\n\ninterface RoutesProps {}\n\nexport const Routes: React.FC<RoutesProps> = () => {\n  // Boolean variable for user authentication\n  const [auth, setAuth] = useState(false);\n\n  // Run effect and clean up only once (on mount and unmount)\n  useEffect(() => {\n    // Update auth with current value in localStorage\n    const isAuth = localStorage.getItem(\"auth\");\n    if (isAuth) {\n      setAuth(true);\n    } else {\n      setAuth(false);\n    }\n  }, []);\n\n  return (\n    <>\n      {/* Always display Nav component */}\n      <Nav />\n\n      <Switch>\n        {/* \n          Redirect to /posts\n        */}\n\n        <Route exact path=\"/\">\n          <Redirect to=\"/posts\" />\n        </Route>\n\n        {/* \n          Posts page\n          Public\n        */}\n\n        <Route exact path=\"/posts\">\n          <PublicPosts></PublicPosts>\n        </Route>\n\n        {/*\n          Posts page\n          Admin  \n          If user isn't authentiated display Login component\n        */}\n\n        <Route exact path=\"/admin\">\n          {auth ? <AdminPosts /> : <Login />}\n        </Route>\n\n        {/* \n          Route for single post \n          Public \n        */}\n\n        <Route exact path=\"/posts/:id\">\n          <PublicPost />\n        </Route>\n\n        {/* \n          Route for single post \n          Admin \n        */}\n\n        <Route exact path=\"/admin/posts/:id\">\n          <AdminPost />\n        </Route>\n      </Switch>\n    </>\n  );\n};\n","/*--------------------------------------------------------------*/\n\nimport React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Routes } from \"./Routes\";\n\n/*--------------------------------------------------------------*/\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Routes />\n      </BrowserRouter>\n    </div>\n  );\n};\n\n/*--------------------------------------------------------------*/\n\nexport default App;\n\n/*--------------------------------------------------------------*/\n","/*--------------------------------------------------------------*/\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { ThemeProvider } from \"styled-components\";\nimport Theme from \"./theme/Theme\";\nimport GlobalStyle from \"./theme/GlobalStyle\";\n\nimport App from \"./App\";\nimport { HashRouter } from \"react-router-dom\";\n\n/*--------------------------------------------------------------*/\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter basename=\"/\">\n      <ThemeProvider theme={Theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}